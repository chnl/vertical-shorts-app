generator client {
  provider = "prisma-client-js"
}

generator uploadService {
  provider      = "prisma-client-js"
  output        = "../upload-service/generated"
  binaryTargets = ["debian-openssl-1.1.x"]
}

generator handleGcsVideoUpload {
  provider      = "prisma-client-js"
  output        = "../cloud-functions/handle-gcs-video-upload/generated"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

generator cloudYoutubeClient {
  provider      = "prisma-client-js"
  output        = "../cloud-functions/upload-youtube-short/generated"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

generator cloudTiktokUploadClient {
  provider      = "prisma-client-js"
  output        = "../cloud-functions/upload-tiktok-video/generated"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

generator cloudTiktokCheckUploadStatusClient {
  provider      = "prisma-client-js"
  output        = "../cloud-functions/check-tiktok-upload-status/generated"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  YOUTUBE
  INSTAGRAM
  TIKTOK
  FACEBOOK
  TWITTER
}

enum UploadStatus {
  NOT_STARTED
  UPLOADING
  PRIVATE
  PUBLIC
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         Password?
  projects         Project[]
  currentProjectId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model YoutubeCredentials {
  id           String   @id @default(cuid())
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  channelId    String?
  userId       String
  projectId    String   @unique
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model InstagramCredentials {
  id          String   @id @default(cuid())
  accessToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  username    String
  projectId   String   @unique
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TikTokCredentials {
  id                    String   @id @default(cuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  accessToken           String
  refreshToken          String
  refreshTokenExpiresIn Int
  scope                 String
  openId                String
  projectId             String   @unique
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model FacebookCredentials {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pageId    String
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TwitterCredentials {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Content {
  slug            String
  title           String
  description     String?
  thumbnail       String?
  gif             String?
  tags            String[]
  published       Boolean?      @default(false)
  publishAt       DateTime?
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  projectId       String
  project         Project       @relation(fields: [projectId], references: [id])
  youtubeStatus   UploadStatus? @default(NOT_STARTED)
  tikTokStatus    UploadStatus? @default(NOT_STARTED)
  instagramStatus UploadStatus? @default(NOT_STARTED)
  facebookStatus  UploadStatus? @default(NOT_STARTED)
  twitterStatus   UploadStatus? @default(NOT_STARTED)

  @@unique([projectId, slug])
}

model Project {
  id                   String                @id @default(cuid())
  title                String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String
  user                 User                  @relation(fields: [userId], references: [id])
  content              Content[]
  channels             Channel[]
  youtubeCredentials   YoutubeCredentials?
  instagramCredentials InstagramCredentials?
  tikTokCredentials    TikTokCredentials?
  facebookCredentials  FacebookCredentials?
  twitterCredentials   TwitterCredentials?
}

model Channel {
  name        String
  views       Int?
  subscribers Int?
  thumbnail   String?
  channelType ChannelType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id])

  @@unique([projectId, channelType])
}
